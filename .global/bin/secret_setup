#!/bin/bash

read -p "Do you use terminal-gemini? (y/n): " -e gemini
if [[ -z "$gemini" || "$gemini" == "y" ]]; then
  cat <<EOF
There are two repositories about gemini-terminal at github.
1) greycodee/gemini-terminal
2) eliben/gemini-cli
3) all
4) none
EOF
  read -p "Enter the number for installation or setup. (1/2/3/4): " -e install

  if ! command -v go &>/dev/null; then
    echo -e "Detected you do not have \`go\`, note that this installation is required \`go\`\nso skipping."
    return
  fi

  if [[ $install == "4" ]]; then
    echo "Installation of gemini-terminal is skipped."
    return
  fi

  if [[ -z "$install" || "$install" == "1" || "$install" == "3" ]]; then
    if command -v gemini-terminal &>/dev/null; then
      echo "greycodee/gemini-terminal is already installed."
    else
      mkdir -p ~/git/

      read -p "Do you delete git project source directory after build? (y/n): " -e after_delete

      git clone https://github.com/greycodee/gemini-terminal.git ~/git/gemini-terminal
      cd ~/git/gemini-terminal && go build .
      echo -e "Finish build.\nCopy gemini-terminal as executable file into ~/.global/bin/"
      mkdir -p ~/.global/bin/
      cp ~/git/gemini-terminal/gemini-terminal ~/.global/bin/

      if [[ -z "$after_delete" || "$after_delete" == "y" ]]; then
        rm -rf ~/git/gemini-terminal/
      else
        echo "Deletion of git project source dirctory is skipped."
      fi

    fi
  fi

  if [[ -z "$install" || "$install" == "2" || "$install" == "3" ]]; then
    if command -v gemini-cli &>/dev/null; then
      echo "eliben/gemini-cli is already installed."
    else
      go install github.com/eliben/gemini-cli@latest
    fi
  fi

  echo "=== First Setup Section ==="

  cat <<EOF
=== First Setup Section ===
This section requires Gemini-API-key generated from https://aistudio.google.com/
Also, you have to choose model name of it.
EOF

  read -s -p "Enter Gemini API key. (Input is hidden mode now): " API_KEY
  echo ""

  read -p "Enter gemini model name. (default: gemini-2.0-flash): " model
  model="${model:-gemini-2.0-flash}"

  if [[ -z "$install" || "$install" == "1" || "$install" == "3" ]]; then
    mkdir -p ~/.local/share/gemini/
    if [[ -f ~/.local/share/gemini/config.ini ]]; then
      sed -i "s/^googleAIKey=.*/googleAIKey=$API_KEY/" ~/.local/share/gemini/config.ini
      sed -i "s/^model=.*/model=$model/" ~/.local/share/gemini/config.ini
      echo "Updated ~/.local/share/gemini/config.ini"
    else
      # see default config: https://github.com/greycodee/gemini-terminal#configuration
      cat <<EOF >~/.local/share/gemini/config.ini
[Gemini]
googleAIKey=$API_KEY
model=$model
[SafetySetting]
level=4
EOF
      echo "Created ~/.local/share/gemini/config.ini"
    fi
  fi

  if [[ -z "$install" || "$install" == "2" || "$install" == "3" ]]; then
    mkdir -p ~/.secret
    if grep -q "export GEMINI_API_KEY=" ~/.secret/.bashrc; then
      sed -i "s/^export GEMINI_API_KEY=.*/export GEMINI_API_KEY=\"$API_KEY\"/" ~/.secret/.bashrc
      echo "Updated GEMINI_API_KEY in ~/.secret/.bashrc"
    else
      echo "export GEMINI_API_KEY=\"$API_KEY\"" >>~/.secret/.bashrc
      echo "Added GEMINI_API_KEY to ~/.secret/.bashrc"
    fi

    if grep -q "alias gemini-cli=" ~/.secret/.bashrc 2>/dev/null; then
      sed -i "s/^alias gemini-cli=.*/alias gemini-cli=\"gemini-cli --model $model\"/" ~/.secret/.bashrc
      echo "Updated alias gemini-cli in ~/.secret/.bashrc"
    else
      echo "alias gemini-cli=\"gemini-cli --model $model\"" >>~/.secret/.bashrc
      echo "Added alias gemini-cli to ~/.secret/.bashrc"
    fi

    echo "Gemini API key and alias has been saved to ~/.secret/.bashrc"
    source ~/.secret/.bashrc
  fi

  echo "All operation is done."
  echo -e "You will be able to use cmds below!\n'gemini-terminal' or 'gemini-cli'."
else
  echo "Using terminal-gemini is skipped."
fi
