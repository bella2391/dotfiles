#!/bin/bash

read -p "Do you use terminal-gemini? (y/n): " gemini
if [[ -z "$gemini" || "$gemini" == "y" ]]; then
  cat <<EOF
There are two repositories about gemini-terminal at github.
1) greycodee/gemini-terminal
2) eliben/gemini-cli
3) all
4) none
EOF
  read -p "
Enter the number for installation or setup. (1/2/3/4): " install

  if ! command -v go &>/dev/null; then
    echo -e "\nDetected you do not have \`go\`, note that this installation is required \`go\`\nso skipping."
    return
  fi

  if [[ $install == "4" ]]; then
    echo "\nInstallation of gemini-terminal is skipped."
    return
  fi

  ORIGINAL_DIR=$(pwd)

  if [[ -z "$install" || "$install" == "1" || "$install" == "3" ]]; then
    if command -v gemini-terminal &>/dev/null; then
      echo -e "\ngreycodee/gemini-terminal is already installed."
    else
      mkdir -p ~/git/

      read -p "
Do you delete git project source directory after build? (y/n): " after_delete

      git clone https://github.com/greycodee/gemini-terminal.git ~/git/gemini-terminal
      cd ~/git/gemini-terminal && go build .
      echo -e "\nFinish build.\nCopy gemini-terminal as executable file into ~/.global/bin/"
      mkdir -p ~/.global/bin/
      cp ~/git/gemini-terminal/gemini-terminal ~/.global/bin/
      cd "$ORIGINAL_DIR"

      if [[ -z "$after_delete" || "$after_delete" == "y" ]]; then
        rm -rf ~/git/gemini-terminal/
        echo -e "\nGit project source directory is deleted."
      else
        echo -e "\nDeletion of git project source dirctory is skipped."
      fi
    fi
  fi

  if [[ -z "$install" || "$install" == "2" || "$install" == "3" ]]; then
    if command -v gemini-cli &>/dev/null; then
      echo -e "\neliben/gemini-cli is already installed."
    else
      go install github.com/eliben/gemini-cli@latest
    fi
  fi

  cat <<EOF
=== First Setup Section ===
This section requires Gemini-API-key generated from https://aistudio.google.com/
Also, you have to choose model name of it.
EOF

  read -s -p "
Enter Gemini API key. (Input is hidden mode now): " API_KEY
  echo ""

  read -p "
Enter gemini model name. (default: gemini-2.0-flash): " model
  model="${model:-gemini-2.0-flash}"

  if [[ -z "$install" || "$install" == "1" || "$install" == "3" ]]; then
    mkdir -p ~/.local/share/gemini/
    if [[ -f ~/.local/share/gemini/config.ini ]]; then
      sed -i "s/^googleAIKey=.*/googleAIKey=$API_KEY/" ~/.local/share/gemini/config.ini
      sed -i "s/^model=.*/model=$model/" ~/.local/share/gemini/config.ini
      echo -e "\nUpdated ~/.local/share/gemini/config.ini"
    else
      # see default config: https://github.com/greycodee/gemini-terminal#configuration
      cat <<EOF >~/.local/share/gemini/config.ini
[Gemini]
googleAIKey=$API_KEY
model=$model
[SafetySetting]
level=4
EOF
      echo -e "\nCreated ~/.local/share/gemini/config.ini"
    fi
  fi

  if [[ -z "$install" || "$install" == "2" || "$install" == "3" ]]; then
    mkdir -p ~/.secret
    if [ -f ~/.secret/.bashrc ] && grep -q "export GEMINI_API_KEY=" ~/.secret/.bashrc 2>/dev/null; then
      sed -i "s/^export GEMINI_API_KEY=.*/export GEMINI_API_KEY=\"$API_KEY\"/" ~/.secret/.bashrc
      echo -e "\nUpdated GEMINI_API_KEY in ~/.secret/.bashrc"
    else
      echo "export GEMINI_API_KEY=\"$API_KEY\"" >>~/.secret/.bashrc
      echo -e "\nAdded GEMINI_API_KEY to ~/.secret/.bashrc"
    fi

    if [ -f ~/.secret/.bashrc ] && grep -q "alias mygemini=" ~/.secret/.bashrc 2>/dev/null; then
      sed -i "s/^alias mygemini=.*/alias mygemini=\"gemini-cli --model $model\"/" ~/.secret/.bashrc
      echo -e "\nUpdated alias mygemini in ~/.secret/.bashrc"
    else
      echo "alias mygemini=\"gemini-cli --model $model\"" >>~/.secret/.bashrc
      echo -e "\nAdded alias mygemini to ~/.secret/.bashrc"
    fi

    echo -e "\nGemini API key and alias has been saved to ~/.secret/.bashrc"
    source ~/.secret/.bashrc
    source ~/.bashrc
  fi

  echo -e "\nAll operation is done."
  echo -e "\nYou will be able to use cmds below!\n'gemini-terminal' or 'gemini-cli'.\nHave Fun!"
else
  echo -e "\nUsing terminal-gemini is skipped."
fi
