#!/bin/bash

. define

MOVE_OLD_FILES=true
TODAY=$(date +%Y%m%d)

declare -A SOURCE_DEST_MAP=(
  ["spigot"]="spigot/sv1_21_4/build/libs/${ORG}-Spigot-1.21.4.jar:${BACKUP_JAR_DIR}/spigot/1.21.4:${SERVER_DIR}/survival/latest/plugins/:${SERVER_DIR}/home/plugins/:${SERVER_DIR}/dev/test/plugins/"
  ["spigot2"]="spigot/sv1_21_3/build/libs/${ORG}-Spigot-1.21.3.jar:${BACKUP_JAR_DIR}/spigot/1.21.3:${SERVER_DIR}/minigame/darumasan/plugins/"
  ["spigot3"]="spigot/sv1_20_2/build/libs/${ORG}-Spigot-1.20.2.jar:${BACKUP_JAR_DIR}/spigot/1.20.2:${SERVER_DIR}/minigame/relics/plugins/"
  ["velocity"]="velocity/build/libs/${ORG}-Velocity-3.4.0.jar:${BACKUP_JAR_DIR}/velocity/3.4.0:${SERVER_DIR}/velocity/plugins/"
  ["fabric"]="fabric/fav1_20_4/build/libs/${ORG}-Fabric-1.20.4-remapped.jar:${BACKUP_JAR_DIR}/fabric/1.20.4:${SERVER_DIR}/mod/universe/mods/"
  ["forge"]="forge/fov1_21_1/build/libs/${ORG}-Forge-1.21.1-reobfed.jar:${BACKUP_JAR_DIR}/forge/1.21.1:${SERVER_DIR}/dev/forge/mods/"
  ["neoforge"]="neoforge/neofov1_21_1/build/libs/${ORG}-NeoForge-1.21.1.jar:${BACKUP_JAR_DIR}/neoforge/1.21.1:${SERVER_DIR}/mod/twillest/mods/"
  ["dev"]="spigot/sv1_21_4/build/libs/${ORG}-Spigot-1.21.4.jar:${BACKUP_JAR_DIR}/spigot/1.21.4:${SERVER_DIR}/dev/test/plugins/"
)

process_copy() {
  local target="$1"
  local source_path
  local backup_dir
  local destination_paths_str
  local IFS=':'

  if [[ ! -v SOURCE_DEST_MAP["$target"] ]]; then
    echo "Error: Target '$target' not found."
    return 1
  fi

  read -ra parts <<<"${SOURCE_DEST_MAP["$target"]}"
  source_path="${GIT_SOURCE_PROJECT_DIR}/${parts[0]}"
  backup_dir="${parts[1]}"
  destination_paths_str="${parts[2]}"
  destination_paths=(${destination_paths_str//:/ }) # Split by colon

  if [ ! -e "$source_path" ]; then
    echo "Error: Source file '$source_path' not found."
    return 1
  fi

  local jar_file_name
  local dest_file

  if [ "$MOVE_OLD_FILES" = true ]; then
    local jar_files
    jar_files=($(find "${backup_dir}" -maxdepth 1 -name "*.jar"))
    if [ ${#jar_files[@]} -eq 1 ]; then
      jar_file_name="${jar_files[0]}"
      dest_file="${jar_file_name}"
      if [ -f "$dest_file" ]; then
        local counter=0
        while true; do
          local backup_target_dir="$backup_dir/before/${TODAY}${counter}"
          if [ ! -d "$backup_target_dir" ]; then
            mkdir -p "$backup_target_dir"
            mv "$dest_file" "$backup_target_dir/"
            echo "Moved $dest_file to $backup_target_dir/"
            break
          fi
          counter=$((counter + 1))
        done
      fi
    elif [ ${#jar_files[@]} -gt 1 ]; then
      echo "Warning: Multiple JAR files found in backup directory '${backup_dir}'. Skipping backup."
    fi
  fi

  for destination in "${destination_paths[@]}"; do
    if [ -n "$destination" ]; then
      mkdir -p "$destination"
      cp "$source_path" "$destination"
      if [ $? -eq 0 ]; then
        echo "Copied $source_path to $destination successfully."
      else
        echo "Failed to copy $source_path to $destination."
      fi
    fi
  done
}

if [ $# -eq 0 ]; then
  echo "No arguments provided. Executing for all defined targets:"
  echo "- all # for all under"
  for target in "${!SOURCE_DEST_MAP[@]}"; do
    echo "- $target"
    # process_copy "$target"
  done
elif [ "$1" = "all" ]; then
  echo "Executing for all defined targets:"
  for target in "${!SOURCE_DEST_MAP[@]}"; do
    echo "- $target"
    process_copy "$target"
  done
else
  for arg in "$@"; do
    process_copy "$arg"
  done
fi

exit 0
